.\" Automatically generated by Pandoc 2.3.1
.\"
.TH "s1kd\-aspp" "1" "2021\-04\-16" "" "s1kd\-tools"
.hy
.SH NAME
.PP
s1kd\-aspp \- Applicability statement preprocessor
.SH SYNOPSIS
.IP
.nf
\f[C]
s1kd\-aspp\ [options]\ [<object>\ ...]
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[I]s1kd\-aspp\f[] tool has two main functions:
.IP \[bu] 2
Generates display text for applicability statements.
The text is derived from the logic described by the \f[C]assert\f[] and
\f[C]evaluate\f[] elements.
.IP \[bu] 2
Preprocesses "semantic" applicability statements in a data module to
produce "presentation" applicability statements which are simpler to
parse in an XSLT stylesheet.
.PP
"Semantic" applicability statements are those entered by the author to
encode the applicability of elements within a data module.
"Presentation" applicability statements are those that are actually
displayed in page\-oriented output, also referred to as the
"human\-readable" statements.
.PP
The applicability in the resulting XML is longer semantically correct,
but an XSLT stylesheet can simply place a statement on any element with
attribute \f[C]applicRefId\f[] without needing to consider inherited
applicability statements on elements without the attribute.
.SH OPTIONS
.TP
.B \-., \-\-dump\-disptext
Dump the built\-in .disptext file.
.RS
.RE
.TP
.B \-,, \-\-dump\-xsl
Dump the built\-in XSLT used to generate display text for applicability
statements.
.RS
.RE
.TP
.B \-A, \-\-act <ACT>
Add an ACT to use when generating display text for product attributes.
Multiple ACT data modules can be used by specifying this option multiple
times.
.RS
.RE
.TP
.B \-a, \-\-id <ID>
The ID to use for the inline applicability annotation representing the
whole data module\[aq]s applicability.
Default is "app\-0000".
.RS
.RE
.TP
.B \-C, \-\-cct <CCT>
Add a CCT to use when generating display text for conditions.
Multiple CCT data modules can be used by specifying this option multiple
times.
.RS
.RE
.TP
.B \-c, \-\-search
Search for the ACT and CCT referenced by each data module, and add them
to the list of ACTs/CCTs to use when generating display text for that
data module.
.RS
.RE
.TP
.B \-D, \-\-delete
Remove the display text from all applicability annotations, except those
that consist of only display text (and no computer processing part).
.RS
.RE
.TP
.B \-d, \-\-dir <dir>
Directory to start searching for ACT/CCT data modules in.
By default, the current directory is used.
.RS
.RE
.TP
.B \-F, \-\-format <fmt>
Use a custom format string to generate display text.
.RS
.RE
.TP
.B \-f, \-\-overwrite
Overwrite input data module(s) rather than outputting to stdout.
.RS
.RE
.TP
.B \-G, \-\-disptext <disptext>
Specify a custom .disptext file.
.RS
.RE
.TP
.B \-g, \-\-generate
Generate display text for applicability statements.
.RS
.RE
.TP
.B \-h, \-?, \-\-help
Show help/usage message.
.RS
.RE
.TP
.B \-k, \-\-keep
When generating display text, do not overwrite existing display text on
statements, only generate display text for statements which have none.
.RS
.RE
.TP
.B \-l, \-\-list
Treat input (stdin or arguments) as lists of filenames of objects,
rather than objects themselves.
.RS
.RE
.TP
.B \-N, \-\-omit\-issue
Assume that the filenames for the ACT and CCT do not include issue info,
i.e.
they were created using the \-N option of the s1kd\-newdm tool.
.RS
.RE
.TP
.B \-p, \-\-presentation
Preprocess applicability statements to produce "presentation"
applicability statements which are simpler to parse in an XSLT
stylesheet.
The applicability in the resulting XML is no longer semantically
correct.
.RS
.RE
.TP
.B \-r, \-\-recursive
Search for ACT/CCT data modules recursively.
.RS
.RE
.TP
.B \-t, \-\-tags <mode>
Add tags before elements containing the display text of the
applicability annotation they reference, simulating the typical
presentation of applicability annotations within the XML.
.RS
.PP
If <mode> is "pi", the tags are inserted as processing instructions,
named "s1kd\-aspp".
This allows existing tags to be removed automatically before adding new
ones.
.PP
If <mode> is "comment", the tags are inserted as XML comments.
Existing comments will not be removed automatically.
.PP
If <mode> is "remove", tags will be removed without adding new ones.
This only applies to the processing instruction tags.
.RE
.TP
.B \-v, \-\-verbose
Verbose output.
.RS
.RE
.TP
.B \-x, \-\-xsl <XSLT>
Use custom XSLT to generate display text for applicability statements.
.RS
.RE
.TP
.B \-\-version
Show version information.
.RS
.RE
.TP
.B <object> ...
The object(s) to preprocess.
This can include both individual objects and combined files such as
those produced by s1kd\-flatten(1).
.RS
.RE
.PP
In addition, the following options allow configuration of the XML
parser:
.TP
.B \-\-dtdload
Load the external DTD.
.RS
.RE
.TP
.B \-\-huge
Remove any internal arbitrary parser limits.
.RS
.RE
.TP
.B \-\-net
Allow network access to load external DTD and entities.
.RS
.RE
.TP
.B \-\-noent
Resolve entities.
.RS
.RE
.TP
.B \-\-parser\-errors
Emit errors from parser.
.RS
.RE
.TP
.B \-\-parser\-warnings
Emit warnings from parser.
.RS
.RE
.TP
.B \-\-xinclude
Do XInclude processing.
.RS
.RE
.TP
.B \-\-xml\-catalog <file>
Use an XML catalog when resolving entities.
Multiple catalogs may be loaded by specifying this option multiple
times.
.RS
.RE
.SS \f[C]\&.disptext\f[] file
.PP
This file specifies rules for generating display text.
It consists of:
.IP \[bu] 2
operator rules
.IP \[bu] 2
property rules
.PP
The \f[C]<operators>\f[] element specifies the format of operators used
in display text:
.TP
.B and
Text to use for the \f[C]and\f[] operator between assertions.
Default is " and ".
.RS
.RE
.TP
.B or
Text to use for the \f[C]or\f[] operator between assertions.
Default is " or ".
.RS
.RE
.TP
.B openGroup
Text to use to open a group of assertions.
Default is "(".
.RS
.RE
.TP
.B closeGroup
Text to use to close a group of assertions.
Default is ")".
.RS
.RE
.TP
.B set
Text to use between items in a set (a|b|c).
.RS
.RE
.TP
.B range
Text to use between the start and end of a range (a~c).
.RS
.RE
.PP
Each \f[C]<property>\f[] element specifies the format used for an
individual property.
The \f[C]<productAttributes>\f[] and \f[C]<conditions>\f[] elements
specify the default format for product attributes and conditions that
are not listed.
Alternatively, the \f[C]<default>\f[] element specifies the default
format for both product attributes and conditions together.
.PP
The format is specified using a combination of the following elements:
.TP
.B <name>
Replaced by the name of the property.
.RS
.RE
.TP
.B <text>
Text that is included as\-is.
.RS
.RE
.TP
.B <values>
Replaced by the values specified for the property in the applicability
assertion.
.RS
.RE
.PP
Optionally, \f[C]<values>\f[] may contain a list of custom labels for
individual values.
Any values not included in this list will use their normal label.
.PP
By default, the program will search for a file named
\f[C]\&.disptext\f[] in the current directory and parent directories,
but any file can be specified using the \-G (\-\-disptext) option.
.PP
Example of a \f[C]\&.disptext\f[] file:
.IP
.nf
\f[C]
<disptext>
<operators>
<and>\ +\ </and>
<or>,\ </or>
<openGroup>[</openGroup>
<closeGroup>]</closeGroup>
<set>\ or\ </set>
<range>\ thru\ </range>
</operators>
<default>
<name/>
<text>:\ </text>
<values/>
</default>
<property\ ident="model"\ type="prodattr">
<values>
<value\ match="BRKTRKR">Brook\ trekker</value>
<value\ match="MNTSTRM">Mountain\ storm</value>
</values>
<text>\ </text>
<name/>
</property>
</disptext>
\f[]
.fi
.PP
Given the above example, the following display would be generated for
each annotation:
.PP
Assert annotation:
.IP
.nf
\f[C]
<assert
applicPropertyIdent="model"
applicPropertyType="prodattr"
applicPropertyValues="BRKTRKR"/>
\f[]
.fi
.PP
Human\-readable format:
.IP
.nf
\f[C]
"Brook\ trekker\ Model"
\f[]
.fi
.PP
Evaluate annotation:
.IP
.nf
\f[C]
<evaluate\ andOr="or">
<evaluate\ andOr="and">
<assert
applicPropertyIdent="model"
applicPropertyType="prodattr"
applicPropertyValues="BRKTRKR"/>
<assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="Mk1"/>
</evaluate>
<evaluate\ andOr="and">
<assert
applicPropertyIdent="model"
applicPropertyType="prodattr"
applicPropertyValues="MNTSTRM"/>
<assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="Mk9"/>
</evaluate>
</evaluate>
\f[]
.fi
.PP
Human\-readable format:
.IP
.nf
\f[C]
"[Brook\ trekker\ Model\ +\ Version:\ Mk9],
[Mountain\ storm\ Model\ +\ Version:\ Mk1]"
\f[]
.fi
.PP
Evaluate annotation:
.IP
.nf
\f[C]
<evaluate\ andOr="and">
<assert
applicPropertyIdent="model"
applicPropertyType="prodattr"
applicPropertyValues="BRKTRKR|MNTSTRM"/>
<assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="Mk1~Mk9"/>
</evaluate>
\f[]
.fi
.PP
Human\-readable format:
.IP
.nf
\f[C]
"Brook\ trekker\ or\ Mountain\ storm\ Model\ +\ Version:\ Mk1\ thru\ Mk9"
\f[]
.fi
.SH EXAMPLES
.SS Generating display text
.PP
The built\-in XSLT for generating display text follows the guidance in
Chap 7.8 of the S1000D 5.0 specification.
For example, given the following:
.IP
.nf
\f[C]
<applic>
<assert\ applicPropertyIdent="prodversion"
applicPropertyType="prodattr"\ applicPropertyValues="A"/>
</applic>
\f[]
.fi
.PP
The resulting XML would contain:
.IP
.nf
\f[C]
<applic>
<displayText>
<simplePara>prodversion:\ A</simplePara>
</displayText>
<assert\ applicPropertyIdent="prodversion"
applicPropertyType="prodattr"\ applicPropertyValues="A"/>
</applic>
\f[]
.fi
.PP
If ACTs or CCTs are supplied which define display names for a property,
this will be used instead of the ident.
For example, the ACT defines the display name for the
"\f[C]prodversion\f[]" product attribute:
.IP
.nf
\f[C]
<productAttribute\ id="prodversion">
<name>Product\ version</name>
<displayName>Version</displayName>
<descr>The\ version\ of\ the\ product.</descr>
<enumeration\ applicPropertyValues="A|B|C"/>
</productAttribute>
\f[]
.fi
.PP
When supplied with the \-A option:
.IP
.nf
\f[C]
$\ s1kd\-aspp\ \-g\ \-A\ <ACT>\ <DM>
\f[]
.fi
.PP
The resulting XML would instead contain:
.IP
.nf
\f[C]
<applic>
<displayText>
<simplePara>Version:\ A</simplePara>
<assert\ applicPropertyIdent="prodversion"
applicPropertyType="prodattr"\ applicPropertyValues="A"/>
</displayText>
</applic>
\f[]
.fi
.PP
The methods for generating display text can be changed either via the
\f[C]\&.disptext\f[] file, or by supplying a custom XSLT script with the
\-x option.
The \-, option can be used to dump the built\-in XSLT as a starting
point for a custom script.
.SS Display text format string (\-F)
.PP
The \-F option allows for very simple customizations to generated
display text without needing to create a custom \f[C]\&.disptext\f[]
file or XSLT script (\-x).
The string determines the format of the display text of each
\f[C]<assert>\f[] element in the annotation.
.PP
The following variables can be used within the format string:
.TP
.B %name%
The name of the property.
.RS
.RE
.TP
.B %values%
The applicable value(s) of the property.
.RS
.RE
.PP
For example:
.IP
.nf
\f[C]
$\ s1kd\-aspp\ \-g\ <DM>
\&...
<applic>
<displayText>
<simplePara>Version:\ A</simplePara>
</displayText>
<assert\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValues="A"/>
</applic>
\&...

$\ s1kd\-aspp\ \-F\ \[aq]%name%\ =\ %values%\[aq]\ \-g\ <DM>
\&...
<applic>
<displayText>
<simplePara>Version\ =\ A</simplePara>
</displayText>
<assert\ applicPropertyIdent="version"\ applicPropertyType="prodattr"
applicPropertyValues="A"/>
</applic>
\&...
\f[]
.fi
.SS Creating presentation applicability statements
.PP
Given the following:
.IP
.nf
\f[C]
<dmodule>
<identAndStatusSection>
<dmAddress>...</dmAddress>
<dmStatus>
\&...
<applic>
<displayText>
<simplePara>A\ or\ B</simplePara>
</displayText>
</applic>
\&...
</dmStatus>
</identAndStatusSection>
<content>
<referencedApplicGroup>
<applic\ id="app\-B">
<displayText>
<simplePara>B</simplePara>
</displayText>
</applic>
</referencedApplicGroup>
<procedure>
<preliminaryRqmts>...</preliminaryRqmts>
<mainProcedure>
<proceduralStep>
<para>This\ step\ is\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-B">
<para>This\ step\ is\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-B">
<para>This\ step\ is\ also\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep>
<para>This\ step\ is\ also\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
</mainProcedure>
<closeRqmts>...</closeRqmts>
</procedure>
</content>
</dmodule>
\f[]
.fi
.PP
Applicability statements should be displayed whenever applicability
changes:
.IP "1." 3
This step is applicable to A or B.
.IP "2." 3
\f[I]Applicable to: B\f[]
.RS 4
.PP
This step is applicable to B only.
.RE
.IP "3." 3
This step is also applicable to B only.
.IP "4." 3
\f[I]Applicable to: A or B\f[]
.RS 4
.PP
This step is also applicable to A or B.
.RE
.PP
There are two parts which are difficult to do in an XSLT stylesheet:
.IP \[bu] 2
No statement is shown on Step 3 despite having attribute
\f[C]applicRefId\f[] because the applicability has not changed since the
last statement on Step 2.
.IP \[bu] 2
A statement is shown on Step 4 despite not having attribute
\f[C]applicRefId\f[] because the applicability has changed back to that
of the whole data module.
.PP
Using the s1kd\-aspp tool, the above XML would produce the following
output:
.IP
.nf
\f[C]
<dmodule>
<identAndStatusSection>
<dmAddress>...</dmAddress>
<dmStatus>
\&...
<applic>
<displayText>
<simplePara>A\ or\ B</simplePara>
</displayText>
</applic>
\&...
</dmStatus>
</identAndStatusSection>
<content>
<referencedApplicGroup>
<applic\ id="app\-B">
<displayText>
<simplePara>B</simplePara>
</displayText>
</applic>
<applic\ id="app\-0000">
<displayText>
<simplePara>A\ or\ B</simplePara>
</displayText>
</applic>
</referencedApplicGroup>
<procedure>
<preliminaryRqmts>...</preliminaryRqmts>
<mainProcedure>
<proceduralStep>
<para>This\ step\ is\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-B">
<para>This\ step\ is\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep>
<para>This\ step\ is\ also\ applicable\ to\ B\ only.</para>
</proceduralStep>
<proceduralStep\ applicRefId="app\-0000">
<para>This\ step\ is\ also\ applicable\ to\ A\ or\ B.</para>
</proceduralStep>
</mainProcedure>
</procedure>
</content>
</dmodule>
\f[]
.fi
.PP
With attribute \f[C]applicRefId\f[] only on those elements where a
statement should be shown, and an additional inline applicability to
represent the whole data module\[aq]s applicability.
This XML is semantically incorrect but easier for a stylesheet to
transform for page\-oriented output.
.SH DISPTEXT FILE SCHEMA
.SS Display text rules
.PP
The element \f[C]<disptext>\f[] contains all the rules for the
formatting of generated display text in applicability annotations.
.PP
\f[I]Markup element:\f[] \f[C]<disptext>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<operators>\f[]
.IP \[bu] 2
\f[C]<default>\f[]
.IP \[bu] 2
\f[C]<productAttributes>\f[]
.IP \[bu] 2
\f[C]<conditions>\f[]
.IP \[bu] 2
\f[C]<conditionType>\f[]
.IP \[bu] 2
\f[C]<property>\f[]
.SS Operator rules
.PP
The element \f[C]<operators>\f[] defines the format of operators used in
applicability display text.
.PP
\f[I]Markup element:\f[] \f[C]<operators>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<and>\f[], text used for the \f[C]and\f[] operator between
assertions in an evaluation.
.IP \[bu] 2
\f[C]<or>\f[], text used for the \f[C]or\f[] operator between assertions
in an evaluation.
.IP \[bu] 2
\f[C]<openGroup>\f[], text used to open a group of assertions.
.IP \[bu] 2
\f[C]<closeGroup>\f[], text used to close a group of assertions.
.IP \[bu] 2
\f[C]<set>\f[], text used between items in a set.
.IP \[bu] 2
\f[C]<range>\f[], text used between the start and end of a range.
.SS Default property format
.PP
The element \f[C]<default>\f[] defines the default format for all
properties which are not matched by a more specific rule.
.PP
\f[I]Markup element:\f[] \f[C]<default>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<name>\f[], replaced by the name of the property.
.IP \[bu] 2
\f[C]<text>\f[], text that is included as\-is.
.IP \[bu] 2
\f[C]<values>\f[], replaced by the values specified for the property in
the applicability assertion.
.SS Product attributes format
.PP
The element \f[C]<productAttributes>\f[] defines the default format for
all product attributes which are not matched by a more specific rule.
.PP
\f[I]Markup element:\f[] \f[C]<productAttributes>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<name>\f[], replaced by the name of the product attribute.
.IP \[bu] 2
\f[C]<text>\f[], text that is included as\-is.
.IP \[bu] 2
\f[C]<values>\f[], replaced by the values specified for the product
attribute in the applicability assertion.
.SS Conditions format
.PP
The element \f[C]<conditions>\f[] defines the default format for all
conditions which are not matched by a more specific rule.
.PP
\f[I]Markup element:\f[] \f[C]<conditions>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<name>\f[], replaced by the name of the condition.
.IP \[bu] 2
\f[C]<text>\f[], text that is included as\-is.
.IP \[bu] 2
\f[C]<values>\f[], replaced by the values specified for the condition in
the applicability assertion.
.SS Condition type format
.PP
The element \f[C]<conditionType>\f[] defines the format for all
conditions of a given type which are not matched by a more specific
rule.
.PP
\f[I]Markup element:\f[] \f[C]<conditionType>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
\f[C]ident\f[] (M), the ID of the condition type in the CCT.
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<name>\f[], replaced by the name of the condition.
.IP \[bu] 2
\f[C]<text>\f[], text that is included as\-is.
.IP \[bu] 2
\f[C]<values>\f[], replaced by the values specified for the condition in
the applicability assertion.
.SS Property format
.PP
The element \f[C]<property>\f[] defines the format for a specific
property.
.PP
\f[I]Markup element:\f[] \f[C]<property>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
\f[C]ident\f[] (M), the ID of the property in the ACT or CCT.
.IP \[bu] 2
\f[C]type\f[] (M), the type of the property, either "\f[C]condition\f[]"
or "\f[C]prodattr\f[]".
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<name>\f[], replaced by the name of the property.
.IP \[bu] 2
\f[C]<text>\f[], text that is included as\-is.
.IP \[bu] 2
\f[C]<values>\f[], replaced by the values specified for the property in
the applicability assertion.
.SS Values
.PP
The element \f[C]<values>\f[] is replaced by the values specified for a
property in an applicability assertion, and may specify custom labels
for certain values.
.PP
\f[I]Markup element:\f[] \f[C]<values>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
\f[C]<value>\f[]
.SS Custom value label
.PP
The element \f[C]<value>\f[] specifies a custom label for an individual
value of a property.
.PP
\f[I]Markup element:\f[] \f[C]<value>\f[]
.PP
\f[I]Attributes:\f[]
.IP \[bu] 2
\f[C]match\f[] (M), the value to apply the custom label for.
.PP
\f[I]Child elements:\f[]
.IP \[bu] 2
None
.SH AUTHORS
khzae.net.
