.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "s1kd\-repcheck" "1" "2024\-03\-21" "" "s1kd\-tools"
.hy
.SH NAME
.PP
s1kd\-repcheck \- Validate CIR references in S1000D CSDB objects
.SH SYNOPSIS
.IP
.nf
\f[C]
s1kd\-repcheck\ [options]\ [<objects>...]
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[I]s1kd\-repcheck\f[] tool validates references to Common
Information Repository (CIR) items within S1000D CSDB objects.
Any CIR references which cannot be resolved to a specification within a
CIR data module will cause the tool to report an error.
.SH OPTIONS
.TP
.B \-A, \-\-all\-refs
Validate indirect tool/supply/part CIR references using the element
\f[C]<identNumber>\f[].
Normally, only the direct reference elements \f[C]<toolRef>\f[],
\f[C]<supplyRef>\f[] and \f[C]<partRef>\f[] are validated.
.RS
.RE
.TP
.B \-a, \-\-all
In addition to CIR data modules specified with \-R or explicitly linked
in CIR references, allow CIR references to be resolved against any CIR
data modules that were specified as objects to check.
.RS
.RE
.TP
.B \-D, \-\-dump\-xsl
Dump the built\-in XSLT used to extract CIR references.
.RS
.RE
.TP
.B \-d, \-\-dir <dir>
The directory to start searching for CIR data modules in.
By default, the current directory is used.
.RS
.RE
.TP
.B \-F, \-\-valid\-filenames
Print the filenames of valid objects.
.RS
.RE
.TP
.B \-f, \-\-filenames
Print the filenames of invalid objects.
.RS
.RE
.TP
.B \-h, \-?, \-\-help
Show help/usage message.
.RS
.RE
.TP
.B \-L, \-\-list\-refs
List CIR references found in objects instead of validating them.
.RS
.RE
.TP
.B \-l, \-\-list
Treat input as a list of CSDB objects to check.
.RS
.RE
.TP
.B \-N, \-\-omit\-issue
Assume that the issue/inwork numbers are omitted from object filenames
(they were created with the \-N option).
.RS
.RE
.TP
.B \-o, \-\-output\-valid
Output valid CSDB objects to stdout.
.RS
.RE
.TP
.B \-p, \-\-progress
Display a progress bar.
.RS
.RE
.TP
.B \-q, \-\-quiet
Quiet mode.
Error messages will not be printed.
.RS
.RE
.TP
.B \-R, \-\-cir <CIR>
A CIR to resolve references in CSDB objects against.
Multiple CIRs can be specified by using this option multiple times.
.RS
.PP
If "*" is given for <CIR>, the tool will search for CIR data modules
automatically.
.RE
.TP
.B \-r, \-\-recursive
Search for CIR data modules recursively.
.RS
.RE
.TP
.B \-T, \-\-summary
Print a summary of the check after it completes, including statistics on
the number of objects that passed/failed the check.
.RS
.RE
.TP
.B \-t, \-\-type <type>
Validate or list only CIR references of the specified type.
The built\-in types are:
.RS
.IP \[bu] 2
acp (Access point)
.IP \[bu] 2
app (Applicability annotation)
.IP \[bu] 2
caut (Caution)
.IP \[bu] 2
cbr (Circuit breaker)
.IP \[bu] 2
cin (Control/Indicator)
.IP \[bu] 2
ent (Enterprise)
.IP \[bu] 2
fin (Functional item)
.IP \[bu] 2
part
.IP \[bu] 2
supply
.IP \[bu] 2
tool
.IP \[bu] 2
warn (Warning)
.IP \[bu] 2
zone
.RE
.TP
.B \-v, \-\-verbose
Verbose output.
Specify multiple times to increase the verbosity.
.RS
.RE
.TP
.B \-X, \-\-xsl <file>
Use custom XSLT to extract CIR references.
.RS
.RE
.TP
.B \-x, \-\-xml
Print an XML report of the check.
.RS
.RE
.TP
.B \-^, \-\-remove\-deleted
Validate with elements that have a change type of "delete" removed.
CIR data modules with an issue type of "deleted" will also be ignored in
the automatic search when this option is specified.
.RS
.RE
.TP
.B \-\-version
Show version information.
.RS
.RE
.TP
.B \-\-zenity\-progress
Print progress information in the zenity \-\-progress format.
.RS
.RE
.TP
.B <object>...
Object(s) to check CIR references in.
.RS
.RE
.PP
In addition, the following options allow configuration of the XML
parser:
.TP
.B \-\-dtdload
Load the external DTD.
.RS
.RE
.TP
.B \-\-huge
Remove any internal arbitrary parser limits.
.RS
.RE
.TP
.B \-\-net
Allow network access to load external DTD and entities.
.RS
.RE
.TP
.B \-\-noent
Resolve entities.
.RS
.RE
.TP
.B \-\-parser\-errors
Emit errors from parser.
.RS
.RE
.TP
.B \-\-parser\-warnings
Emit warnings from parser.
.RS
.RE
.TP
.B \-\-xinclude
Do XInclude processing.
.RS
.RE
.TP
.B \-\-xml\-catalog <file>
Use an XML catalog when resolving entities.
Multiple catalogs may be loaded by specifying this option multiple
times.
.RS
.RE
.SS Custom XSLT (\-X)
.PP
What elements are extracted as CIR references for validating, and how
they are validated, can be configured through a custom XSLT script
specified with the \-X (\-\-xsl) option.
.PP
The custom XSLT script should add the following attributes to elements
which will be validated as CIR references:
.TP
.B \f[C]type\f[]
A name for the type of CIR reference.
.RS
.RE
.TP
.B \f[C]name\f[]
A descriptive name for the CIR reference that can be used in reports.
.RS
.RE
.TP
.B \f[C]test\f[]
An XPath expression used to match the corresponding CIR identification
element.
.RS
.RE
.PP
The namespace for these attributes must be:
\f[C]urn:s1kd\-tools:s1kd\-repcheck\f[]
.PP
Example XSLT template to extract functional item references:
.IP
.nf
\f[C]
<xsl:template\ match="functionalItemRef">
<xsl:variable\ name="fin"\ select="\@functionalItemNumber"/>
<xsl:copy>
<xsl:apply\-templates\ select="\@*"/>
<xsl:attribute\ name="s1kd\-repcheck:type">fin</xsl:attribute>
<xsl:attribute\ name="s1kd\-repcheck:name">
<xsl:text>Functional\ item\ </xsl:text>
<xsl:value\-of\ select="$fin"/>
</xsl:attribute>
<xsl:attribute\ name="s1kd\-repcheck:test">
<xsl:text>//functionalItemIdent[\@functionalItemNumber=\[aq]</xsl:text>
<xsl:value\-of\ select="$fin"/>
<xsl:text>\[aq]]</xsl:text>
</xsl:attribute>
<xsl:apply\-templates\ select="node()"/>
</xsl:copy>
</xsl:template>
\f[]
.fi
.PP
A custom script also allows validating non\-standard types of "CIR"
references.
For example, if a project wants to validate acronyms used in data
modules against a central repository of acronyms, this could be done
like so:
.IP
.nf
\f[C]
<xsl:template\ match="acronym">
<xsl:variable\ name="term"\ select="acronymTerm"/>
<xsl:copy>
<xsl:apply\-templates\ select="\@*"/>
<xsl:attribute\ name="s1kd\-repcheck:type">acr</xsl:attribute>
<xsl:attribute\ name="s1kd\-repcheck:name">
<xsl:text>Acronym\ </xsl:text>
<xsl:value\-of\ select="$term"/>
</xsl:attribute>
<xsl:attribute\ name="s1kd\-repcheck:test">
<xsl:text>//acronym[acronymTerm\ =\ \[aq]</xsl:text>
<xsl:value\-of\ select="$term"/>
<xsl:text>\[aq]]</xsl:text>
</xsl:attribute>
<xsl:apply\-templates\ select="node()"/>
</xsl:copy>
</xsl:template>
\f[]
.fi
.PP
As there is no standard "acronym" CIR type, the object containing the
repository would need to be specified explicitly with \-R.
.PP
The built\-in XSLT for extracting CIR references can be dumped as a
starting point for a custom script by specifying the \-D (\-\-dump\-xsl)
option.
.SH EXIT STATUS
.TP
.B 0
The check completed successfully, and all CIR references were resolved.
.RS
.RE
.TP
.B 1
The check completed successfully, but some CIR references could not be
resolved.
.RS
.RE
.TP
.B 2
The number of CSDB objects specified exceeded the available memory.
.RS
.RE
.SH EXAMPLE
.PP
Part repository:
.IP
.nf
\f[C]
<partRepository>
<partSpec>
<partIdent\ manufacturerCodeValue="12345"\ partNumberValue="ABC"/>
<itemIdentData>
<descrForPart>ABC\ part</descrForPart>
</itemIdentData>
</partSpec>
</partRepository>
\f[]
.fi
.PP
Part references in a procedure:
.IP
.nf
\f[C]
<spareDescrGroup>
<spareDescr>
<partRef\ manufacturerCodeValue="12345"\ partNumberValue="ABC"/>
<reqQuantity>1</reqQuantity>
</spareDescr>
<spareDescr>
<partRef\ manufacturerCodeValue="12345"\ partNumberValue="DEF"/>
<reqQuantity>1</reqQuantity>
</spareDescr>
</spareDescrGroup>
\f[]
.fi
.PP
Command and results:
.IP
.nf
\f[C]
$\ s1kd\-repcheck\ \-R\ <CIR>\ ...\ <DM>
s1kd\-repcheck:\ ERROR:\ <DM>\ (<line>):\ Part\ 12345/DEF\ not\ found.
\f[]
.fi
.SH AUTHORS
khzae.net.
